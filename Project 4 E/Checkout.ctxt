#BlueJ class context
comment0.params=clock
comment0.target=Checkout(Clock)
comment0.text=\r\n\ One\ option\ (recommended),\ for\ Checkout,\ would\ be\ to\ create\ all\ 4\ cashier\r\n\ instances\ from\ the\ start,\ and\ then\ bring\ a\ cashier\ into\ service,\ or\ take\r\n\ one\ out\ of\ service,\ all\ under\ the\ control\ of\ the\ GUI,\ of\ course.\r\n
comment1.params=serviceTimeEstimate
comment1.target=void\ addCashier(double)
comment1.text=\r\n\ To\ add\ a\ cashier,\ use\ the\ numCashiers\ method\ to\ index\ into\ the\ cashier\ array.\r\n\ \r\n\ Set\ the\ serviceTimeEstimate\ field\ for\ the\ cashier\ brought\ into\ service.\r\n\ \r\n\ If\ "EQ.size()\ >\ 0",\ call\ performAction\ to\ put\ this\ cashier\ to\ work,\ immediately.\r\n
comment2.params=person
comment2.target=void\ add(Person)
comment3.params=
comment3.target=int\ chooseCashier()
comment3.text=\ \r\n\ Choose\ a\ cashier\ so\ that\ they\ all\ take\ turns.\ Starting\ with\ turn,\r\n\ cycle\ through\ the\ list\ of\ cashiers\ with\ the\ %\ operater\ to\ choose\r\n\ the\ next\ cashier.\ \ It\ is\ possible\ that\ all\ of\ the\ cashiers\ may\ be\r\n\ busy,\ but\ still\ a\ valid\ cashier\ index\ must\ be\ returned.\ Always,\r\n\ the\ next\ value\ of\ turn\ should\ be\ one\ "greater"\ than\ the\ index\r\n\ that\ is\ actually\ returned\ for\ the\ current\ turn.\r\n
comment4.params=e
comment4.target=void\ performAction(Event163)
comment4.text=\r\n\ This\ Checkout\ performAction\ method\ selects\ the\ cashier.\r\n\ The\ method\ is\ not\ at\ all\ trivial,\ as\ it\ handles\ various\r\n\ conditions.\ Think\ about\ this\ carefully\ as\ performAction\ \r\n\ is\ to\ model\ the\ real\ life\ situation.\r\n\ \r\n\ Part\ of\ the\ logic,\ here,\ is\ to\ determine\ whether\ or\ not\r\n\ the\ performAction\ method\ in\ Checkout\ is\ ready\ to\ invoke\r\n\ the\ performAction(\ e\ )\ method\ in\ Cashier\ for\ a\ cashier\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this.cashier[\ ?\ ].performAction(\ e\ );\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ and\ to\ determine\ which\ cashier\ (?)\ to\ use.\r\n\ \r\n\ For\ an\ ENTER\ event,\ this\ method\ must\ choose\ a\ cashier,\ n,\ \r\n\ and\ execute\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ this.cashier[\ n\ ].person\ \=\ PQ.remove(\ 0\ );\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ before\ calling\ this.cashier[\ n\ ].performAction(\ e\ )\ \r\n\ \r\n\ For\ a\ LEAVE\ event,\ this\ method\ must\ execute\r\n\ \r\n\ \ \ \ \ this.cashier[\ e.serverIndex\ ].performAction(\ e\ );\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ where\ e.serverIndex\ remembers\ the\ cashier\ index\ from\r\n\ the\ time\ to\ ENTER\ until\ the\ time\ to\ LEAVE.\r\n\ \r\n\ After\ a\ LEAVE\ event,\ there\ is\ an\ issue\ of\ what\ to\ do\ if\r\n\ there\ are\ still\ pending\ events\ in\ the\ event\ queue,\ EQ.\r\n
comment5.params=
comment5.target=java.lang.String\ PQtoString()
comment6.params=e
comment6.target=void\ report(Event163)
comment7.params=
comment7.target=void\ showStatistics()
numComments=8
